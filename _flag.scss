// *************************************
//
//   #FLAG
//
// *************************************

// The flag object is a design pattern similar to the media object, however it
// utilises `display: table[-cell];` to give us control over the vertical
// alignments of the text and image. csswizardry.com/2013/05/the-flag-object

// Predefine the variables below in order to alter and enable specific features.
$tree-flag-gutter:             $tree-base-spacing-unit !default;
$tree-flag-gutter--small:      halve($tree-flag-gutter) !default;
$tree-flag-gutter--large:      double($tree-flag-gutter) !default;

$tree-enable-flag--small:      false !default;
$tree-enable-flag--large:      false !default;
$tree-enable-flag--rev:        false !default;
$tree-enable-flag--flush:      false !default;
$tree-enable-flag--top:        false !default;
$tree-enable-flag--bottom:     false !default;
$tree-enable-flag--responsive: false !default;
$tree-flag-collapse-at:        720px !default;





// 1. Allows us to control vertical alignments
// 2. Force the object to be the full width of its parent. Combined with [1],
//    this makes the object behave in a quasi-`display: block;` manner.
.#{$tree-namespace}flag,
%#{$tree-namespace}flag {
    display: table; // [1]
    width: 100%; // [2]
}

    // Items within a flag object. There should only ever be one of each.
    //
    // 1. Default to aligning content to their middles.
    .#{$tree-namespace}flag__img,
    %#{$tree-namespace}flag__img,
    .#{$tree-namespace}flag__body,
    %#{$tree-namespace}flag__body {
        display: table-cell;
        vertical-align: middle; // [1]
    }

     // Flag images have a space between them and the body of the object.
    .#{$tree-namespace}flag__img,
    %#{$tree-namespace}flag__img {
        padding-right: $tree-flag-gutter;

        > img {
            display: block;
            max-width: none;
        }

    }

    // The container for the main content of the flag object.
    //
    // 1. Forces the `.flag__body` to take up all remaining space.
    .#{$tree-namespace}flag__body,
    %#{$tree-namespace}flag__body {
        width: 100%; // [1]

        &,
        > :last-child {
            margin-bottom: 0;
        }

    }





@if ($tree-enable-flag--small == true) {

    // Small flags.

    .#{$tree-namespace}flag--small,
    %#{$tree-namespace}flag--small {

        > .#{$tree-namespace}flag__img,
        > %#{$tree-namespace}flag__img {
            padding-right: $tree-flag-gutter--small;
        }

        @if ($tree-enable-flag--rev == true) {

            // Small reversed flags.

            &.#{$tree-namespace}flag--rev,
            &%#{$tree-namespace}flag--rev {

                > .#{$tree-namespace}flag__img,
                > %#{$tree-namespace}flag__img {
                    padding-right: 0;
                    padding-left:  $tree-flag-gutter--small;
                }

            }

        }

    }

}

@if ($tree-enable-flag--large == true) {

    // Large flags.

    .#{$tree-namespace}flag--large,
    %#{$tree-namespace}flag--large {

        > .#{$tree-namespace}flag__img,
        > %#{$tree-namespace}flag__img {
            padding-right: $tree-flag-gutter--large;
        }

        @if ($tree-enable-flag--rev == true) {

            // Large reversed flags.

            &.#{$tree-namespace}flag--rev,
            &%#{$tree-namespace}flag--rev {

                > .#{$tree-namespace}flag__img,
                > %#{$tree-namespace}flag__img {
                    padding-right: 0;
                    padding-left:  $tree-flag-gutter--large;
                }

            }

        }

    }

}





@if ($tree-enable-flag--rev == true) {

    // Reversed flag objects have their image-content to the right, and text-content
    // to the left.
    //
    // 1. Swap the rendered direction of the object…
    // 2. …and reset it.
    // 3. Reassign margins to the correct sides.

    .#{$tree-namespace}flag--rev,
    %#{$tree-namespace}flag--rev {
        direction: rtl; // [1]

        > .#{$tree-namespace}flag__img,
        > %#{$tree-namespace}flag__img,
        > .#{$tree-namespace}flag__body,
        > %#{$tree-namespace}flag__body {
            direction: ltr; // [2]
        }

        > .#{$tree-namespace}flag__img,
        > %#{$tree-namespace}flag__img {
            padding-right: 0; // [3]
            padding-left: $tree-flag-gutter; // [3]
        }

    }

}





@if ($tree-enable-flag--flush == true) {

    // Flush flag objects have no space between the image- and text-content.

    .#{$tree-namespace}flag--flush,
    %#{$tree-namespace}flag--flush {

        > .#{$tree-namespace}flag__img,
        > %#{$tree-namespace}flag__img {
            padding-right: 0;
            padding-left:  0;
        }

    }

}





@if ($tree-enable-flag--top == true) {

    // Vertically top aligned flag objects.

    .#{$tree-namespace}flag--top,
    %#{$tree-namespace}flag--top {

        > .#{$tree-namespace}flag__img,
        > %#{$tree-namespace}flag__img,
        > .#{$tree-namespace}flag__body,
        > %#{$tree-namespace}flag__body {
            vertical-align: top;
        }

    }

}

@if ($tree-enable-flag--bottom == true) {

    // Vertically bottom aligned flag objects.

    .#{$tree-namespace}flag--bottom,
    %#{$tree-namespace}flag--bottom {

        > .#{$tree-namespace}flag__img,
        > %#{$tree-namespace}flag__img,
        > .#{$tree-namespace}flag__body,
        > %#{$tree-namespace}flag__body {
            vertical-align: bottom;
        }

    }

}




@if ($tree-enable-flag--responsive == true) {

    // Responsive flag objects.
    //
    // There is a very pragmatic, simple implementation of a responsive flag
    // object, which simply places the text-content beneath the image-content.
    //
    // We use a `max-width` media query because:
    //
    // a) it is the least verbose method in terms of amount of code required.
    // b) the flag object’s default state is image-next-to-text, so its stacked
    //    state is the exception, rather than the rule.

    @media screen and (max-width: $tree-flag-collapse-at) {

        .#{$tree-namespace}flag--responsive,
        %#{$tree-namespace}flag--responsive {

            @if ($tree-enable-flag--rev == true) {

                // Disable reversal of content because there is no concept of
                // ‘reversed’ in a stacked layout.
                direction: ltr;
            }

            &,
            > .#{$tree-namespace}flag__img,
            > %#{$tree-namespace}flag__img,
            > .#{$tree-namespace}flag__body,
            > %#{$tree-namespace}flag__body {
                display: block;
            }


            // Rework the spacings on regular flag objects.

            > .#{$tree-namespace}flag__img,
            > %#{$tree-namespace}flag__img {
                padding-right: 0;
                padding-left:  0;
                margin-bottom: $tree-flag-gutter;
            }

            @if ($tree-enable-flag--small == true) {

                //  Small responsive flags.
                //
                //  Take a little more heavy-handed approach to reworking
                //  spacings on flags that are also small flags in their regular
                //  state.

                &.#{$tree-namespace}flag--small,
                &%#{$tree-namespace}flag--small {

                    > .#{$tree-namespace}flag__img,
                    > %#{$tree-namespace}flag__img {
                        padding-right: 0;
                        padding-left:  0;
                    }

                }

            }

            @if ($tree-enable-flag--large == true) {

                // Large responsive flags.
                //
                // Take a little more heavy-handed approach to reworking
                // spacings on flags that are also large flags in their regular
                // state.

                &.#{$tree-namespace}flag--large,
                &%#{$tree-namespace}flag--large {

                    > .#{$tree-namespace}flag__img,
                    > %#{$tree-namespace}flag__img {
                        padding-right: 0;
                        padding-left:  0;
                    }

                }

            }

        }

    }

}
